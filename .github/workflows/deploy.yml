name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  security-events: write

jobs:
  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore Dependencies
        run: dotnet restore Yarnique.sln

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        with:
          command: code test
          args: --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  pre-deployment:
    name: Pre-Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Define Actions Runner IP
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          gh secret set AGENT_IP --body $(curl -s https://api.ipify.org/)
          echo AGENT_IP is set up with value $(curl -s https://api.ipify.org/)

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDS }}

      - name: Whitelist GitHub Actions runner
        uses: azure/cli@v2
        with:
          inlineScript: |
            az sql server firewall-rule create --name ${{ secrets.AZURE_SERVER_FIREWALL_RULE }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --server ${{ secrets.AZURE_SERVER_NAME }} --start-ip-address ${{ secrets.AGENT_IP }} --end-ip-address ${{ secrets.AGENT_IP }}

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    needs: pre-deployment
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0

      - name: Restore Dependencies
        run: dotnet restore ./src/Yarnique.sln

      - name: dotnet lint
        run: dotnet format ./src/Yarnique.sln --verify-no-changes

      - name: Apply migrations to Test DB
        env:
          ASPNETCORE_ENVIRONMENT: ${{ secrets.ASPNETCORE_ENVIRONMENT }}
          YarniqueConnectionString: ${{ secrets.YARNIQUEDB_TEST_CONNECTION_STRING }}
        run: |
          dotnet build ./src/Database/Yarnique.Database.Migration/Yarnique.Database.Migrations.csproj --no-restore
          dotnet run --project ./src/Database/Yarnique.Database.Migration/Yarnique.Database.Migrations.csproj

      - name: dotnet test
        env:
          TestDataBase_ConnectionString: ${{ secrets.YARNIQUEDB_TEST_CONNECTION_STRING }}
        run: dotnet test ./src/Yarnique.sln --no-restore

  apply-migration:
    name: Apply Database Migrations
    runs-on: ubuntu-latest
    needs: [ pre-deployment, lint-and-test ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0

      - name: Run Database Migration
        env:
          ASPNETCORE_ENVIRONMENT: ${{ secrets.ASPNETCORE_ENVIRONMENT }}
          YarniqueConnectionString: ${{ secrets.YARNIQUEDB_CONNECTION_STRING }}
        run: |
          dotnet build ./src/Database/Yarnique.Database.Migration/Yarnique.Database.Migrations.csproj
          dotnet run --project ./src/Database/Yarnique.Database.Migration/Yarnique.Database.Migrations.csproj

  prepare-images:
    name: Build and push docker images
    runs-on: ubuntu-latest
    needs: [ pre-deployment, lint-and-test, apply-migration ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: acryarnique.azurecr.io
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      - name: Build and Push Payment API
        run: |
          docker build -t acryarnique.azurecr.io/payment-api:latest -f ./docker/payment.api.dockerfile .
          docker push acryarnique.azurecr.io/payment-api:latest

      - name: Build and Push Background Service
        run: |
          docker build -t acryarnique.azurecr.io/background-service:latest -f ./docker/background.service.dockerfile .
          docker push acryarnique.azurecr.io/background-service:latest

      - name: Build and Push Main Web API
        run: |
          docker build -t acryarnique.azurecr.io/main-webapi:latest -f ./docker/main.webapi.dockerfile .
          docker push acryarnique.azurecr.io/main-webapi:latest

  terraform-deploy:
    name: Deploy via Terraform
    runs-on: ubuntu-latest
    needs: [ pre-deployment, lint-and-test, apply-migration, prepare-images ]
    defaults:
      run:
        working-directory: ./terraform
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Plan
        env:
          TF_VAR_resource_group_name: ${{ secrets.TF_VAR_RESOURCE_GROUP_NAME }}
          TF_VAR_resource_location: ${{ secrets.TF_VAR_RESOURCE_LOCATION }}
          TF_VAR_acr_name: ${{ secrets.TF_VAR_ACR_NAME }}
          TF_VAR_service_plan_id: ${{ secrets.TF_VAR_SERVICE_PLAN_ID }}
          TF_VAR_key_vault_uri: ${{ secrets.TF_VAR_KEY_VAULT_URI }}
          TF_VAR_storage_account_name : ${{ secrets.TF_VAR_TFSTATE_STORAGE }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        env:
          TF_VAR_resource_group_name: ${{ secrets.TF_VAR_RESOURCE_GROUP_NAME }}
          TF_VAR_resource_location: ${{ secrets.TF_VAR_RESOURCE_LOCATION }}
          TF_VAR_acr_name: ${{ secrets.TF_VAR_ACR_NAME }}
          TF_VAR_service_plan_id: ${{ secrets.TF_VAR_SERVICE_PLAN_ID }}
          TF_VAR_key_vault_uri: ${{ secrets.TF_VAR_KEY_VAULT_URI }}
          TF_VAR_storage_account_name : ${{ secrets.TF_VAR_TFSTATE_STORAGE }}
        run: terraform apply -auto-approve tfplan

  terraform-unlock:
    name: Terraform unlock
    runs-on: ubuntu-latest
    needs: [terraform-deploy]
    if: always() && needs.terraform-deploy.result == 'failure'
    steps:
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDS }}

      - name: Unlock Terraform blob storage
        run: |
          az storage blob lease break --blob-name ${{ secrets.TF_STATE_BLOB_NAME }} --container-name ${{ secrets.TF_STATE_CONTAINER_NAME }} --account-name ${{ secrets.TF_STATE_ACCOUNT_NAME }} --account-key ${{ secrets.TF_STATE_ACCOUNT_KEY }}

  post-deployment:
    name: Post-Deployment
    runs-on: ubuntu-latest
    if: always()
    needs: [pre-deployment, terraform-deploy]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDS }}

      - name: Remove GitHub Runner IP from Whitelist
        uses: azure/cli@v2
        with:
          inlineScript: |
            az sql server firewall-rule delete --name ${{ secrets.AZURE_SERVER_FIREWALL_RULE }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --server ${{ secrets.AZURE_SERVER_NAME }}

      - name: logout
        run: |
          az logout
